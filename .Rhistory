find.packages('devtools')
find.package('devtools')
find.packages("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
remove.packages(devtools)
find.package('devtools')
remove.packages('devtools')
find.package('devtools')
install.packages("devtools")
find.package('devtools')
library(devtools)
find_rtools()
exit
quit
install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x,y) {
x + y
}
add2(3,5)
above10 <- function(x) {
use <- x > 10
x[use]
}
x <- 1:30
above10
above10(11)
above10(4411)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x,12)
above(x)
above10(2)
above10(22)
columnmean <- function(y, removeNA = TRUE) {
nc = ncol(y)
means <- numeric[nc]
for (i:1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc = ncol(y)
means <- numeric[nc]
for (i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc = ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
library(datasets)
data(iris)
?iris
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
.
;]]
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- 9
x2 <- 4
fit <- lm(y ~ x1 + x2)
y <- 4
fit <- lm(y ~ x1 + x2)
summaryRprof()
rprof(null)
Rprof(null)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
Rprof()
fit <- lm(weight ~ group + 3)
fit <- lm(weight ~ group)
Rprof(NULL)
summaryRprof()
library(swirl)
swirl()
1:30
1:20
pi:10
15:1
':'
`:`
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2),each=10)
c(0.5,55,-10 6)
c(0.5,55,-10, 6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
tf <- num_vect >= 6
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"Renato")
my_name <- c(my_char,"Renato")
my_name
paste(my_char,collapse = " ")
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4,sep="-")
x <- c(44, NA, 5, NA)
x <- x*3
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
o/0
0/0
Inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y{y>0]}
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[5])
c(x[3],c[5],c[7])
c(x[3],x[5],x[7])
info()
y <- c(x[3],x[5],x[7])
x[3]
x(3,5,7)
c(3,5,7)
skip()
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
vect.names()
vect(names())
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
1
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
not5!=7
!5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
istru(6>4)
istrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6;!FALSE)
xor(5==6,!FALSE)
inst(sample(10))
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints <= 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
submit()
skip()
skip
quit
,
;
quit
exit
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize()
summarize(by_package)
summarize(by_package, mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
q()
submit()
swirl()
library(swirl)
swirl()
submit()
submit()
q()
save.image("~/.RData")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel
?xyplot
names(lattice.options())
?panel.xyplot
?example(xyplot)
apropos("^panel")
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?qplot
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
setwd("C:/Users/rdeggau/Dropbox/Minha Biblioteca/Treinamentos/Coursera/The Data Science Specialization/05 - Reproducible Research/RepData_PeerAssessment1")
?aggregate
